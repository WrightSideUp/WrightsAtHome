//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Projects\WrightsAtHome\Source\Server\WrightsAtHome.Server\Domain\Services\Trigger\Parser\Grammar\Trigger.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace WrightsAtHome.Server.Domain.Services.Trigger.Parser.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class TriggerParser : Parser {
	public const int
		T__1=1, T__0=2, AFTER=3, WHEN=4, AT=5, MUL=6, DIV=7, PLUS=8, MINUS=9, 
		LESSTHAN=10, LESSEQUAL=11, EQUAL=12, NOTEQUAL=13, GREATERTHAN=14, GREATEREQUAL=15, 
		AND=16, OR=17, NOT=18, MINUTES=19, HOURS=20, TIMECONST=21, STRING=22, 
		DECIMAL=23, INT=24, CURRENTTIMEFUNC=25, ID=26, WS=27, ErrorChar=28;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'('", "')'", "'after'", "'when'", "'at'", "'*'", "'/'", 
		"'+'", "'-'", "'<'", "'<='", "'='", "'<>'", "'>'", "'>='", "'and'", "'or'", 
		"'not'", "MINUTES", "HOURS", "TIMECONST", "STRING", "DECIMAL", "INT", 
		"CURRENTTIMEFUNC", "ID", "WS", "ErrorChar"
	};
	public const int
		RULE_trigger = 0, RULE_afterExp = 1, RULE_duration = 2, RULE_timePeriod = 3, 
		RULE_atExp = 4, RULE_whenExp = 5, RULE_expr = 6;
	public static readonly string[] ruleNames = {
		"trigger", "afterExp", "duration", "timePeriod", "atExp", "whenExp", "expr"
	};

	public override string GrammarFileName { get { return "Trigger.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TriggerParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class TriggerContext : ParserRuleContext {
		public AfterExpContext afterExp() {
			return GetRuleContext<AfterExpContext>(0);
		}
		public WhenExpContext whenExp() {
			return GetRuleContext<WhenExpContext>(0);
		}
		public AtExpContext atExp() {
			return GetRuleContext<AtExpContext>(0);
		}
		public TriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.EnterTrigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.ExitTrigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITriggerVisitor<TResult> typedVisitor = visitor as ITriggerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriggerContext trigger() {
		TriggerContext _localctx = new TriggerContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_trigger);
		try {
			State = 17;
			switch (_input.La(1)) {
			case AFTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14; afterExp();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 15; atExp();
				}
				break;
			case WHEN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 16; whenExp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AfterExpContext : ParserRuleContext {
		public DurationContext duration() {
			return GetRuleContext<DurationContext>(0);
		}
		public ITerminalNode AFTER() { return GetToken(TriggerParser.AFTER, 0); }
		public AfterExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_afterExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.EnterAfterExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.ExitAfterExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITriggerVisitor<TResult> typedVisitor = visitor as ITriggerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAfterExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AfterExpContext afterExp() {
		AfterExpContext _localctx = new AfterExpContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_afterExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19; Match(AFTER);
			State = 20; duration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationContext : ParserRuleContext {
		public TimePeriodContext timePeriod() {
			return GetRuleContext<TimePeriodContext>(0);
		}
		public ITerminalNode INT() { return GetToken(TriggerParser.INT, 0); }
		public DurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_duration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.EnterDuration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.ExitDuration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITriggerVisitor<TResult> typedVisitor = visitor as ITriggerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDuration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DurationContext duration() {
		DurationContext _localctx = new DurationContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_duration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; Match(INT);
			State = 23; timePeriod();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimePeriodContext : ParserRuleContext {
		public ITerminalNode HOURS() { return GetToken(TriggerParser.HOURS, 0); }
		public ITerminalNode MINUTES() { return GetToken(TriggerParser.MINUTES, 0); }
		public TimePeriodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timePeriod; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.EnterTimePeriod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.ExitTimePeriod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITriggerVisitor<TResult> typedVisitor = visitor as ITriggerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimePeriod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimePeriodContext timePeriod() {
		TimePeriodContext _localctx = new TimePeriodContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_timePeriod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			_la = _input.La(1);
			if ( !(_la==MINUTES || _la==HOURS) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtExpContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(TriggerParser.AT, 0); }
		public ITerminalNode TIMECONST() { return GetToken(TriggerParser.TIMECONST, 0); }
		public AtExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.EnterAtExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.ExitAtExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITriggerVisitor<TResult> typedVisitor = visitor as ITriggerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtExpContext atExp() {
		AtExpContext _localctx = new AtExpContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_atExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; Match(AT);
			State = 28; Match(TIMECONST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenExpContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode WHEN() { return GetToken(TriggerParser.WHEN, 0); }
		public WhenExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.EnterWhenExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.ExitWhenExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITriggerVisitor<TResult> typedVisitor = visitor as ITriggerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenExpContext whenExp() {
		WhenExpContext _localctx = new WhenExpContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_whenExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; Match(WHEN);
			State = 31; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NotContext : ExprContext {
		public ITerminalNode NOT() { return GetToken(TriggerParser.NOT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.EnterNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.ExitNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITriggerVisitor<TResult> typedVisitor = visitor as ITriggerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TimeConstContext : ExprContext {
		public ITerminalNode TIMECONST() { return GetToken(TriggerParser.TIMECONST, 0); }
		public TimeConstContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.EnterTimeConst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.ExitTimeConst(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITriggerVisitor<TResult> typedVisitor = visitor as ITriggerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeConst(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierContext : ExprContext {
		public ITerminalNode ID() { return GetToken(TriggerParser.ID, 0); }
		public IdentifierContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITriggerVisitor<TResult> typedVisitor = visitor as ITriggerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegationContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(TriggerParser.MINUS, 0); }
		public NegationContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.EnterNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.ExitNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITriggerVisitor<TResult> typedVisitor = visitor as ITriggerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CurrentTimeContext : ExprContext {
		public ITerminalNode CURRENTTIMEFUNC() { return GetToken(TriggerParser.CURRENTTIMEFUNC, 0); }
		public CurrentTimeContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.EnterCurrentTime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.ExitCurrentTime(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITriggerVisitor<TResult> typedVisitor = visitor as ITriggerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentTime(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryContext : ExprContext {
		public ITerminalNode GREATEREQUAL() { return GetToken(TriggerParser.GREATEREQUAL, 0); }
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode OR() { return GetToken(TriggerParser.OR, 0); }
		public ITerminalNode MUL() { return GetToken(TriggerParser.MUL, 0); }
		public ITerminalNode EQUAL() { return GetToken(TriggerParser.EQUAL, 0); }
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ITerminalNode GREATERTHAN() { return GetToken(TriggerParser.GREATERTHAN, 0); }
		public ITerminalNode LESSEQUAL() { return GetToken(TriggerParser.LESSEQUAL, 0); }
		public ITerminalNode LESSTHAN() { return GetToken(TriggerParser.LESSTHAN, 0); }
		public ITerminalNode AND() { return GetToken(TriggerParser.AND, 0); }
		public ITerminalNode PLUS() { return GetToken(TriggerParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(TriggerParser.MINUS, 0); }
		public ITerminalNode NOTEQUAL() { return GetToken(TriggerParser.NOTEQUAL, 0); }
		public ITerminalNode DIV() { return GetToken(TriggerParser.DIV, 0); }
		public BinaryContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.EnterBinary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.ExitBinary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITriggerVisitor<TResult> typedVisitor = visitor as ITriggerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomContext : ExprContext {
		public ITerminalNode DECIMAL() { return GetToken(TriggerParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(TriggerParser.STRING, 0); }
		public ITerminalNode INT() { return GetToken(TriggerParser.INT, 0); }
		public AtomContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITriggerVisitor<TResult> typedVisitor = visitor as ITriggerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParenContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.EnterParen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITriggerListener typedListener = listener as ITriggerListener;
			if (typedListener != null) typedListener.ExitParen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITriggerVisitor<TResult> typedVisitor = visitor as ITriggerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			switch (_input.La(1)) {
			case MINUS:
				{
				_localctx = new NegationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 34; Match(MINUS);
				State = 35; expr(15);
				}
				break;
			case NOT:
				{
				_localctx = new NotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 36; Match(NOT);
				State = 37; expr(8);
				}
				break;
			case TIMECONST:
				{
				_localctx = new TimeConstContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 38; Match(TIMECONST);
				}
				break;
			case CURRENTTIMEFUNC:
				{
				_localctx = new CurrentTimeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 39; Match(CURRENTTIMEFUNC);
				}
				break;
			case ID:
				{
				_localctx = new IdentifierContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 40; Match(ID);
				}
				break;
			case INT:
				{
				_localctx = new AtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 41; Match(INT);
				}
				break;
			case DECIMAL:
				{
				_localctx = new AtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 42; Match(DECIMAL);
				}
				break;
			case STRING:
				{
				_localctx = new AtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 43; Match(STRING);
				}
				break;
			case T__1:
				{
				_localctx = new ParenContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 44; Match(T__1);
				State = 45; expr(0);
				State = 46; Match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 70;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 68;
					switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 50;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 51;
						_la = _input.La(1);
						if ( !(_la==MUL || _la==DIV) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 52; expr(15);
						}
						break;

					case 2:
						{
						_localctx = new BinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 53;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 54;
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 55; expr(14);
						}
						break;

					case 3:
						{
						_localctx = new BinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 56;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 57;
						_la = _input.La(1);
						if ( !(_la==LESSTHAN || _la==LESSEQUAL) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 58; expr(13);
						}
						break;

					case 4:
						{
						_localctx = new BinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 59;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 60;
						_la = _input.La(1);
						if ( !(_la==EQUAL || _la==NOTEQUAL) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 61; expr(12);
						}
						break;

					case 5:
						{
						_localctx = new BinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 62;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 63;
						_la = _input.La(1);
						if ( !(_la==GREATERTHAN || _la==GREATEREQUAL) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 64; expr(11);
						}
						break;

					case 6:
						{
						_localctx = new BinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 65;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 66;
						_la = _input.La(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 67; expr(10);
						}
						break;
					}
					} 
				}
				State = 72;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 14);

		case 1: return Precpred(_ctx, 13);

		case 2: return Precpred(_ctx, 12);

		case 3: return Precpred(_ctx, 11);

		case 4: return Precpred(_ctx, 10);

		case 5: return Precpred(_ctx, 9);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1EL\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x3\x2\x3"+
		"\x2\x3\x2\x5\x2\x14\n\x2\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x5\x3"+
		"\x5\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x33\n\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\a\bG\n\b\f\b\xE\bJ\v\b\x3\b\x2\x2\x3\xE\t\x2\x2\x4\x2\x6\x2\b\x2"+
		"\n\x2\f\x2\xE\x2\x2\t\x3\x2\x15\x16\x3\x2\b\t\x3\x2\n\v\x3\x2\f\r\x3\x2"+
		"\xE\xF\x3\x2\x10\x11\x3\x2\x12\x13T\x2\x13\x3\x2\x2\x2\x4\x15\x3\x2\x2"+
		"\x2\x6\x18\x3\x2\x2\x2\b\x1B\x3\x2\x2\x2\n\x1D\x3\x2\x2\x2\f \x3\x2\x2"+
		"\x2\xE\x32\x3\x2\x2\x2\x10\x14\x5\x4\x3\x2\x11\x14\x5\n\x6\x2\x12\x14"+
		"\x5\f\a\x2\x13\x10\x3\x2\x2\x2\x13\x11\x3\x2\x2\x2\x13\x12\x3\x2\x2\x2"+
		"\x14\x3\x3\x2\x2\x2\x15\x16\a\x5\x2\x2\x16\x17\x5\x6\x4\x2\x17\x5\x3\x2"+
		"\x2\x2\x18\x19\a\x1A\x2\x2\x19\x1A\x5\b\x5\x2\x1A\a\x3\x2\x2\x2\x1B\x1C"+
		"\t\x2\x2\x2\x1C\t\x3\x2\x2\x2\x1D\x1E\a\a\x2\x2\x1E\x1F\a\x17\x2\x2\x1F"+
		"\v\x3\x2\x2\x2 !\a\x6\x2\x2!\"\x5\xE\b\x2\"\r\x3\x2\x2\x2#$\b\b\x1\x2"+
		"$%\a\v\x2\x2%\x33\x5\xE\b\x11&\'\a\x14\x2\x2\'\x33\x5\xE\b\n(\x33\a\x17"+
		"\x2\x2)\x33\a\x1B\x2\x2*\x33\a\x1C\x2\x2+\x33\a\x1A\x2\x2,\x33\a\x19\x2"+
		"\x2-\x33\a\x18\x2\x2./\a\x3\x2\x2/\x30\x5\xE\b\x2\x30\x31\a\x4\x2\x2\x31"+
		"\x33\x3\x2\x2\x2\x32#\x3\x2\x2\x2\x32&\x3\x2\x2\x2\x32(\x3\x2\x2\x2\x32"+
		")\x3\x2\x2\x2\x32*\x3\x2\x2\x2\x32+\x3\x2\x2\x2\x32,\x3\x2\x2\x2\x32-"+
		"\x3\x2\x2\x2\x32.\x3\x2\x2\x2\x33H\x3\x2\x2\x2\x34\x35\f\x10\x2\x2\x35"+
		"\x36\t\x3\x2\x2\x36G\x5\xE\b\x11\x37\x38\f\xF\x2\x2\x38\x39\t\x4\x2\x2"+
		"\x39G\x5\xE\b\x10:;\f\xE\x2\x2;<\t\x5\x2\x2<G\x5\xE\b\xF=>\f\r\x2\x2>"+
		"?\t\x6\x2\x2?G\x5\xE\b\xE@\x41\f\f\x2\x2\x41\x42\t\a\x2\x2\x42G\x5\xE"+
		"\b\r\x43\x44\f\v\x2\x2\x44\x45\t\b\x2\x2\x45G\x5\xE\b\f\x46\x34\x3\x2"+
		"\x2\x2\x46\x37\x3\x2\x2\x2\x46:\x3\x2\x2\x2\x46=\x3\x2\x2\x2\x46@\x3\x2"+
		"\x2\x2\x46\x43\x3\x2\x2\x2GJ\x3\x2\x2\x2H\x46\x3\x2\x2\x2HI\x3\x2\x2\x2"+
		"I\xF\x3\x2\x2\x2JH\x3\x2\x2\x2\x6\x13\x32\x46H";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace WrightsAtHome.Server.Domain.Services.Trigger.Parser.Grammar
