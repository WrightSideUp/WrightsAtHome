//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Projects\Trigger\TriggerFramework\Domain\Services\Trigger\Parser\Grammar\Trigger.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace WrightsAtHome.BackEnd.Domain.Services.Trigger.Parser.Generated
{
    using Antlr4.Runtime.Misc;
    using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
    using IToken = Antlr4.Runtime.IToken;

    /// <summary>
    /// This interface defines a complete listener for a parse tree produced by
    /// <see cref="TriggerParser"/>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
    public interface ITriggerListener : IParseTreeListener
    {
        /// <summary>
        /// Enter a parse tree produced by <see cref="TriggerParser.afterExp"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterAfterExp([NotNull] TriggerParser.AfterExpContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="TriggerParser.afterExp"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitAfterExp([NotNull] TriggerParser.AfterExpContext context);

        /// <summary>
        /// Enter a parse tree produced by the <c>Negation</c>
        /// labeled alternative in <see cref="TriggerParser.expr"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterNegation([NotNull] TriggerParser.NegationContext context);
        /// <summary>
        /// Exit a parse tree produced by the <c>Negation</c>
        /// labeled alternative in <see cref="TriggerParser.expr"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitNegation([NotNull] TriggerParser.NegationContext context);

        /// <summary>
        /// Enter a parse tree produced by <see cref="TriggerParser.atExp"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterAtExp([NotNull] TriggerParser.AtExpContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="TriggerParser.atExp"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitAtExp([NotNull] TriggerParser.AtExpContext context);

        /// <summary>
        /// Enter a parse tree produced by <see cref="TriggerParser.trigger"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterTrigger([NotNull] TriggerParser.TriggerContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="TriggerParser.trigger"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitTrigger([NotNull] TriggerParser.TriggerContext context);

        /// <summary>
        /// Enter a parse tree produced by the <c>Atom</c>
        /// labeled alternative in <see cref="TriggerParser.expr"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterAtom([NotNull] TriggerParser.AtomContext context);
        /// <summary>
        /// Exit a parse tree produced by the <c>Atom</c>
        /// labeled alternative in <see cref="TriggerParser.expr"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitAtom([NotNull] TriggerParser.AtomContext context);

        /// <summary>
        /// Enter a parse tree produced by <see cref="TriggerParser.duration"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterDuration([NotNull] TriggerParser.DurationContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="TriggerParser.duration"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitDuration([NotNull] TriggerParser.DurationContext context);

        /// <summary>
        /// Enter a parse tree produced by the <c>Not</c>
        /// labeled alternative in <see cref="TriggerParser.expr"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterNot([NotNull] TriggerParser.NotContext context);
        /// <summary>
        /// Exit a parse tree produced by the <c>Not</c>
        /// labeled alternative in <see cref="TriggerParser.expr"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitNot([NotNull] TriggerParser.NotContext context);

        /// <summary>
        /// Enter a parse tree produced by the <c>Identifier</c>
        /// labeled alternative in <see cref="TriggerParser.expr"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterIdentifier([NotNull] TriggerParser.IdentifierContext context);
        /// <summary>
        /// Exit a parse tree produced by the <c>Identifier</c>
        /// labeled alternative in <see cref="TriggerParser.expr"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitIdentifier([NotNull] TriggerParser.IdentifierContext context);

        /// <summary>
        /// Enter a parse tree produced by <see cref="TriggerParser.timePeriod"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterTimePeriod([NotNull] TriggerParser.TimePeriodContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="TriggerParser.timePeriod"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitTimePeriod([NotNull] TriggerParser.TimePeriodContext context);

        /// <summary>
        /// Enter a parse tree produced by the <c>Binary</c>
        /// labeled alternative in <see cref="TriggerParser.expr"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterBinary([NotNull] TriggerParser.BinaryContext context);
        /// <summary>
        /// Exit a parse tree produced by the <c>Binary</c>
        /// labeled alternative in <see cref="TriggerParser.expr"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitBinary([NotNull] TriggerParser.BinaryContext context);

        /// <summary>
        /// Enter a parse tree produced by <see cref="TriggerParser.whenExp"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterWhenExp([NotNull] TriggerParser.WhenExpContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="TriggerParser.whenExp"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitWhenExp([NotNull] TriggerParser.WhenExpContext context);

        /// <summary>
        /// Enter a parse tree produced by <see cref="TriggerParser.endTrigger"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterEndTrigger([NotNull] TriggerParser.EndTriggerContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="TriggerParser.endTrigger"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitEndTrigger([NotNull] TriggerParser.EndTriggerContext context);

        /// <summary>
        /// Enter a parse tree produced by the <c>Paren</c>
        /// labeled alternative in <see cref="TriggerParser.expr"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterParen([NotNull] TriggerParser.ParenContext context);
        /// <summary>
        /// Exit a parse tree produced by the <c>Paren</c>
        /// labeled alternative in <see cref="TriggerParser.expr"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitParen([NotNull] TriggerParser.ParenContext context);
    }
} // namespace WrightsAtHome.BackEnd.Domain.Services.Trigger.Parser.Generated
